{"version":3,"sources":["components/list.js","App.js","helpers/app_helper.js","serviceWorker.js","index.js"],"names":["List","list","onClick","title","className","map","item","index","key","id","Details","playlist","lighting","scent","tableItems","length","Names","name","App","useState","restaurants","setRestaurants","selectedRestaurant","setSelectedRestaurant","details","setDetails","useEffect","request","window","location","search","fetch","then","res","json","data","newURL","includes","href","replace","history","replaceState","updateUrl","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oRAGaA,G,YAAO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACpC,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,SAAUD,GACzB,yBAAKC,UAAU,UACD,gBAAVD,GACEF,EAAKI,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAOD,KAAMA,EAAME,IAAKF,EAAKG,GAAIP,QAASA,OAE5D,YAAVC,GACEF,EAAKI,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAASD,KAAMA,EAAME,IAAKF,EAAKG,YAOxDC,EAAU,SAAC,GAAc,IAAZJ,EAAW,EAAXA,KACtB,OACE,yBAAKF,UAAU,WACb,yBAAKA,UAAU,cAAeE,EAAKK,UAAL,oBAA8BL,EAAKK,WACjE,yBAAKP,UAAU,cAAeE,EAAKM,UAAL,oBAA8BN,EAAKM,UAAjE,KACA,yBAAKR,UAAU,cAAeE,EAAKO,OAAL,iBAAwBP,EAAKO,OAA3D,KACA,yBAAKT,UAAU,cAAeE,EAAKQ,WAAWC,OAAS,GAAzB,0BAAiDT,EAAKQ,YAApF,OAKKE,EAAQ,SAAC,GAAuB,IAArBV,EAAoB,EAApBA,KAAMJ,EAAc,EAAdA,QAC5B,OACE,yBACEE,UAAU,kBACVF,QAAU,kBAAMA,EAAQI,EAAKG,MAE3BH,EAAKW,OCKEC,MApCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAEuCF,oBAAS,eAFhD,mBAENG,EAFM,KAEcC,EAFd,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAoBb,OAfAC,qBAAU,WACR,IAAMC,EAAU,mBAAqBC,OAAOC,SAASC,OACrDC,MAAMJ,GAASK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1Cd,EAAec,EAAKf,kBAErB,IAEHM,qBAAU,WACR,IAAMC,EAAU,uBAAyBL,GClBpB,SAACA,GACtB,IAAIc,EAAS,GAETd,IAGGc,EAFCR,OAAOC,SAASC,OACdF,OAAOC,SAASC,OAAOO,SAAS,MAC1BT,OAAOC,SAASS,KAAKC,QAAQ,YAAa,KAAOjB,GAEjDM,OAAOC,SAASS,KAAhB,cAA8BhB,GAGhCM,OAAOC,SAASS,KAAhB,cAA8BhB,GAExCM,OAAOY,QAAQC,aAAa,GAAI,KAAML,IDM1CM,CAAUpB,GACVS,MAAMJ,GAASK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1CV,EAAWU,EAAKf,kBAEjB,CAACE,IAGF,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAMH,KAAOmB,EAAclB,QAASqB,EAAuBpB,MAAM,iBAEnE,yBAAKC,UAAU,WACb,kBAAC,EAAD,CAAMH,KAAOuB,EAAUrB,MAAM,iBErBrBwC,QACW,cAA7Bf,OAAOC,SAASe,UAEe,UAA7BhB,OAAOC,SAASe,UAEhBhB,OAAOC,SAASe,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a58686cc.chunk.js","sourcesContent":["import React from 'react'\nimport \"../styles/list.css\"\n\nexport const List = ({ list, onClick, title }) => {\n  return (\n    <div className=\"list\">\n      <div className=\"title\">{ title }</div>\n      <div className=\"scroll\">\n        { title === \"Restaurants\" &&\n            list.map((item, index) => <Names item={item} key={item.id} onClick={onClick} />) \n        }\n        { title === \"Details\" &&\n            list.map((item, index) => <Details item={item} key={item.id}/>) \n        }\n      </div>\n    </div>\n  )\n}\n\nexport const Details = ({ item }) => {    \n    return(\n      <div className=\"details\">\n        <div className=\"detailItem\">{ item.playlist && `Playlist: ${item.playlist}` }</div>\n        <div className=\"detailItem\">{ item.lighting && `Lighting: ${item.lighting}` } </div>\n        <div className=\"detailItem\">{ item.scent && `Scent: ${item.scent}` } </div>\n        <div className=\"detailItem\">{ item.tableItems.length > 0 && `Tabletop Items: ${item.tableItems}` } </div>\n      </div>\n    )\n}\n\nexport const Names = ({ item, onClick }) => {  \n  return(\n    <div \n      className=\"restaurantNames\"\n      onClick={ () => onClick(item.id)}\n    >\n      { item.name } \n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { List } from './components/list';\nimport { updateUrl } from './helpers/app_helper';\n\nfunction App() {\n  const [restaurants, setRestaurants] = useState([]);\n  const [selectedRestaurant, setSelectedRestaurant] = useState(() => {})\n  const [details, setDetails] = useState([]);\n\n  useEffect(() => {\n    const request = '/api/restaurants' + window.location.search\n    fetch(request).then(res => res.json()).then(data => {\n      setRestaurants(data.restaurants);\n    });\n  }, []);\n\n  useEffect(() => {\n    const request = '/api/restaurants?id=' + selectedRestaurant\n    updateUrl(selectedRestaurant)\n    fetch(request).then(res => res.json()).then(data => {\n      setDetails(data.restaurants);\n    });\n  }, [selectedRestaurant]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"row\">\n          <div className=\"names\">\n            <List list={ restaurants } onClick={setSelectedRestaurant} title=\"Restaurants\"/>\n          </div>\n          <div className=\"details\">\n            <List list={ details } title=\"Details\"/>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","export const updateUrl = (selectedRestaurant) => {\n    let newURL = \"\"\n\n    if (selectedRestaurant) {\n        if (window.location.search) {\n          if (window.location.search.includes('id')){\n           newURL = window.location.href.replace(/(id=)[^]+/, '$1' + selectedRestaurant)\n          } else {\n           newURL = window.location.href + `&id=${selectedRestaurant}`\n          }\n        } else {\n         newURL = window.location.href + `?id=${selectedRestaurant}`\n        }\n        window.history.replaceState({}, null, newURL);    \n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}